<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>きんつば - programming</title><link href="http://meganehouser.github.io/" rel="alternate"></link><link href="http://meganehouser.github.io/feeds/programming.atom.xml" rel="self"></link><id>http://meganehouser.github.io/</id><updated>2019-03-04T00:00:00+09:00</updated><subtitle>Pythonとかやるソフトウェアエンジニア</subtitle><entry><title>MacでiHaskellを動かす</title><link href="http://meganehouser.github.io/2019-03-04_run_ihaskell.html" rel="alternate"></link><published>2019-03-04T00:00:00+09:00</published><updated>2019-03-04T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2019-03-04:/2019-03-04_run_ihaskell.html</id><summary type="html">&lt;p&gt;Jupyter notebookをHaskellで動かそうと[gibiansky/IHaskell: A Haskell kernel for IPythonでインストールするパッケージのバージョンを調整。なんとか動いた。&lt;/p&gt;
&lt;p&gt;動く状態のrequirements.txtは以下。これを3.でpip installする時に使えば良い。.](https://github.com/gibiansky/IHaskell)をREADMEを見ながらinstallする。&lt;/p&gt;
&lt;h1&gt;環境&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OS&lt;/td&gt;
&lt;td&gt;macOS Mojave 10.14.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stack&lt;/td&gt;
&lt;td&gt;1.9.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GHC&lt;/td&gt;
&lt;td&gt;8.6.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;手順&lt;/h1&gt;
&lt;p&gt;README通りに進める。
1. 依存するパッケージをインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install zeromq libmagic cairo pkg-config pango
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python3とHaskell-stackはインストール済みだったので外した …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Jupyter notebookをHaskellで動かそうと[gibiansky/IHaskell: A Haskell kernel for IPythonでインストールするパッケージのバージョンを調整。なんとか動いた。&lt;/p&gt;
&lt;p&gt;動く状態のrequirements.txtは以下。これを3.でpip installする時に使えば良い。.](https://github.com/gibiansky/IHaskell)をREADMEを見ながらinstallする。&lt;/p&gt;
&lt;h1&gt;環境&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OS&lt;/td&gt;
&lt;td&gt;macOS Mojave 10.14.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stack&lt;/td&gt;
&lt;td&gt;1.9.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GHC&lt;/td&gt;
&lt;td&gt;8.6.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;手順&lt;/h1&gt;
&lt;p&gt;README通りに進める。
1. 依存するパッケージをインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install zeromq libmagic cairo pkg-config pango
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python3とHaskell-stackはインストール済みだったので外した。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;gitリポジトリをクローン&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/gibiansky/IHaskell
cd IHaskell
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;依存するPythonパッケージをインストール&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv .venv
source .venv/bin/activate
python3 -m pip install requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ipythonのインストールでエラーになる。必要なバージョンのprompt-toolkitが他のパッケージのせいで入れられないため。
入れるパッケージのバージョンを調整する必要がある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Haskellでビルド&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stack install --fast
ihaskell install --stack
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;jupyter notebok起動&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stack exec jupyter -- notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cellを実行しても戻り値が帰ってこない。
ConsoleにWarningログが出ている。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/54963043/jupyter-notebook-no-connection-to-server-because-websocket-connection-fails"&gt;python - Jupyter notebook: No connection to server because websocket connection fails - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近リリースされたtornado 6.0がインストールされてしまっていて、非互換でこけているらしい。
と、いうわけでtornadoは5系がインストールされる必要がある。&lt;/p&gt;
&lt;h1&gt;対処&lt;/h1&gt;
&lt;p&gt;Pythonでインストールするパッケージのバージョンを調整。なんとか動いた。&lt;/p&gt;
&lt;p&gt;動く状態のrequirements.txtは以下。これを3.でpip installする時に使えば良い。&lt;/p&gt;
&lt;script src="https://gist.github.com/meganehouser/32d8a93e3d8b13cbceb6a6f2eb339f1d.js"&gt;&lt;/script&gt;</content><category term="Haskell"></category></entry><entry><title>OSXでOpenTKをビルドする</title><link href="http://meganehouser.github.io/2016-07-11_build_opentk_osx.html" rel="alternate"></link><published>2016-07-11T00:00:00+09:00</published><updated>2016-07-11T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2016-07-11:/2016-07-11_build_opentk_osx.html</id><summary type="html">&lt;p&gt;OpenTKのNugetパッケージはソース不明&lt;/p&gt;</summary><content type="html">&lt;p&gt;F#でProcessingのように簡単なAPIでビュジュアライゼーションできるツールを探していたけど良さそうなものがなかったので作ってみることにした。&lt;/p&gt;
&lt;p&gt;Processingのソースが参考にできるので描画にはProcessingでも使われているOpenGLを使うことにした。
OpenGLのラッパーを書くのもだるいので、既存の.NET Framework用のラッパーであるOpenTKを使うことにした。&lt;/p&gt;
&lt;p&gt;OpenTKはNuGet公式ソースでパッケージが配布され、6月に更新版がリリースされいるのだが、手元のMacBook Airで動かないし、公式サイトのリファレンスと名前空間やenum名などが変わっている。&lt;/p&gt;
&lt;p&gt;どうやら公式のソースからビルドしたものではないらしい。
（&lt;a href="https://github.com/mono/opentk"&gt;Mono/OpenTK&lt;/a&gt;が同じようにOpenTK.Graphics.OpenGK4名前空間がなくなったりしているので、これがソースかもしれないが不明）&lt;/p&gt;
&lt;p&gt;公式サイトのリリースも2014年で止まっているが、githubでの更新は続いているので、ソースからビルドすることにした。&lt;/p&gt;
&lt;p&gt;以下、ソースからのビルドのメモ。
(環境はMacBook Air Mid-2012, El Capitan)&lt;/p&gt;
&lt;p&gt;MonoとNuGetがインストールされていない場合は、インストールしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://github.com/opentk/opentk/archive/develop.zip
$ unzip develop.zip
$ &lt;span class="nb"&gt;cd&lt;/span&gt; opentk-develop
$ mono nuget restore OpenTK.sln
$ xbuild OpenTK.sln
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GLWidgetはビルドエラーになるけどOpenTK.dllはビルドできているので問題ない。
OpenTK.dllをコピーしてプロジェクトに参照追加する。&lt;/p&gt;
&lt;p&gt;以下はOpenGLの&lt;a href="http://www.opengl-tutorial.org/jp/beginners-tutorials/tutorial-2-the-first-triangle/"&gt;opengl-tutorialの2&lt;/a&gt;をOpenTKで実装した例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;OpenTK&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;OpenTK.Graphics&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;OpenTK.Graphics.OpenGL4&lt;/span&gt;

&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AutoOpen&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Shaders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;loadShaders&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;programId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateProgram&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;vertexShaderId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;ShaderType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VertexShader&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShaderSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertexShaderId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAllText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vFile&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CompileShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertexShaderId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AttachShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vertexShaderId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;fragmentShaderId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;ShaderType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FragmentShader&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShaderSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragmentShaderId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAllText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fFile&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CompileShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragmentShaderId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AttachShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fragmentShaderId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LinkProgram&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;attributeCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetProgram&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;GetProgramParameterName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveAttributes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uniformCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetProgram&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;GetProgramParameterName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveUniforms&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertexShaderId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteShader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragmentShaderId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;programId&lt;/span&gt;


&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;GameWindow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;GraphicsMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;opengl-tutorial02&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;GameWindowFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;DisplayDevice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;GraphicsContextFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;initEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publish&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnLoad&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnLoad&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;initEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trigger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SwapBuffers&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EntryPoint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="o"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
        &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnInit&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="o"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;programId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loadShaders&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SimpleVertexShader.vertexshader&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SimpleFragmentShader.fragmentshader&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClearColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseProgram&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;uint32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenVertexArrays&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BindVertexArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;mutable&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
                                   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
                                   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;|]&lt;/span&gt; 
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;uint32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenBuffers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BindBuffer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;BufferTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BufferData&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nn"&gt;BufferTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;BufferUsageHint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StaticDraw&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Clear&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;ClearBufferMask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColorBufferBit&lt;/span&gt; &lt;span class="o"&gt;|||&lt;/span&gt; &lt;span class="nn"&gt;ClearBufferMask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DepthBufferBit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableVertexAttribArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BindBuffer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;BufferTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VertexAttribPointer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;VertexAttribPointerType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawArrays&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;PrimitiveType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Triangles&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nn"&gt;GL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DisableVertexAttribArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="FSharp"></category><category term="OpenTK"></category><category term="OpenGL"></category></entry><entry><title>low-levelのライブラリのソースを読む</title><link href="http://meganehouser.github.io/2016-03-08_rust-libs.html" rel="alternate"></link><published>2016-03-08T00:00:00+09:00</published><updated>2016-03-08T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2016-03-08:/2016-03-08_rust-libs.html</id><summary type="html">&lt;p&gt;low-levelの知見が得られて良い&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近、&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;をポチポチ触っている。
今まではC#/F#/Python/Clojureなどを書いてきていたので、ちょっとlow-levelよりのものに触れてみたくなったので。&lt;/p&gt;
&lt;p&gt;Rustのライブラリを読んでいると、low-levelの知見のキーワードが得られて良い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aturon/crossbeam"&gt;aturon/crossbeam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;並列・並行実行のライブラリ。内部でlock-freeなデータ構造や、Epoch-based relcamationな仕組みを実装している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dpc/mioco"&gt;dpc/mioco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コルーチンを実装しているライブラリ。&lt;/p&gt;
&lt;p&gt;インラインアセンブリでyeild相当の処理を実装している&lt;a href="https://github.com/zonyitoo/context-rs"&gt;context-rs&lt;/a&gt;を内部で使用している。&lt;/p&gt;
&lt;p&gt;個人的には、今はRustでプロキシサーバを書いてみている。
ロジックとメモリの扱いやOwnership, lifetimeも併せて考える必要があるので、業務ロジック部分などは、F#くらいの抽象度の方が集中できると感じた。&lt;/p&gt;</content><category term="Rust"></category></entry><entry><title>mdファイルを表示する簡易Webサーバ</title><link href="http://meganehouser.github.io/2015-04-19_md-view.html" rel="alternate"></link><published>2015-04-19T00:00:00+09:00</published><updated>2015-04-19T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2015-04-19:/2015-04-19_md-view.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Pythonでは、コマンドラインからモジュールを実行することで簡易的なWebサーバを起動できる。&lt;/p&gt;
&lt;p&gt;Markdownファイルだった場合はhtmlに変換して、簡易mdビューアとして使用したい。&lt;/p&gt;
&lt;h2&gt;方法&lt;/h2&gt;
&lt;p&gt;Python3.4のhttp.server.py 内のSimpleHTTPRequestHandlerを継承し、send_headメソッドをオーバーライドした。&lt;/p&gt;
&lt;p&gt;変更箇所は以下。他の部分は元のsend_headをそのまま持ってきている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fstat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
    &lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markdown.extensions.extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;bs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;拡張子がmdだった場合に&lt;a href="https://pypi.python.org/pypi/Markdown"&gt;Markdown&lt;/a&gt;を使用してhtmlに変換している。&lt;/p&gt;
&lt;p&gt;それだけだと芸がないので、-o (open) オプションをつけると、自動でブラウザで開くようにした。&lt;/p&gt;
&lt;p&gt;以下の関数を別スレッドで起動している。
headリクエストを投げ、200で返ってきたらサーバが起動したとみなしブラウザでページを開いている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HEAD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getresponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://{}:{}/{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ConnectionRefusedError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ブラウザを開くのには標準モジュールのwebbrowserを使用している。
Python3系統で導入された、空を飛べる標準モジュール"antigravity"でも使われているものだ。
知らない人は以下を実行してみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;antigravity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;cgi&lt;/h2&gt;
&lt;p&gt;python3.4のhttpのモジュールのserver.pyを読んでいて気付いたのだが、いつの間にかコマンドラインから簡易CGIサーバを起動する方法が復活していた。&lt;/p&gt;
&lt;p&gt;試しにcgi-binディレクトリを作り以下のファイルを置く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /usr/bin/env python3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type: text/html&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;h2&amp;gt;Hello&amp;lt;/h2&amp;gt;&amp;lt;br&amp;gt;from Python3&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ファイルに実行のパーミッションを付加してから、以下のコマンドでCGIサーバを起動。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python http.server --cgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;http://localhost:8000/cgi-bin/hello.py で実行。&lt;/p&gt;
&lt;h2&gt;スクリプト全文&lt;/h2&gt;
&lt;p&gt;MarkDownを表示できる簡易サーバのスクリプト全文は以下。&lt;/p&gt;
&lt;script src="https://gist.github.com/meganehouser/271852d192e64c9e688e.js"&gt;&lt;/script&gt;</content><category term="python"></category></entry><entry><title>Hello World の代わりにLED風数字</title><link href="http://meganehouser.github.io/2015-04-04_led-numbers.html" rel="alternate"></link><published>2015-04-04T00:00:00+09:00</published><updated>2015-04-04T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2015-04-04:/2015-04-04_led-numbers.html</id><summary type="html">&lt;p&gt;Hello World の代わりにLED風数字を表示するコードを書くよ。&lt;/p&gt;</summary><content type="html">&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;こんな記事を見かけたので書いてみることにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blagrants.blogspot.jp/2015/04/led-is-my-new-hello-world-clojure-time.html"&gt;Blag's bag of rants: LED is my new Hello World - Clojure Time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;標準入力で数字を入力すると、LED風に表示するものだ。&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;script src="https://gist.github.com/meganehouser/179da869944c5f2a47eb.js"&gt;&lt;/script&gt;

&lt;h3&gt;Rust&lt;/h3&gt;
&lt;p&gt;リリースされたばかりのBeta 1.0.0を入れたらunstableな機能が使えなくなったのでnightlyでやった。&lt;/p&gt;
&lt;script src="https://gist.github.com/meganehouser/14d255f336189b6f4603.js"&gt;&lt;/script&gt;

&lt;h3&gt;FSharp&lt;/h3&gt;
&lt;script src="https://gist.github.com/meganehouser/457c0b149b8e866205e6.js"&gt;&lt;/script&gt;</content><category term="fsharp"></category><category term="rust"></category><category term="python"></category></entry><entry><title>Scheme in Rust</title><link href="http://meganehouser.github.io/2015-01-10.html" rel="alternate"></link><published>2015-01-10T00:00:00+09:00</published><updated>2015-01-10T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2015-01-10:/2015-01-10.html</id><summary type="html">&lt;p&gt;RustでSchemeをちょっとだけ実装してみた。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Rust 1.0 alpha がリリースされたのでRustを書いてみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/b/ashleyf/archive/2010/09/24/fscheme-0-0-0.aspx"&gt;FScheme - Scheme in F# - Code Monkey Have Fun - Site Home - MSDN Blogs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このサイトを参考にSchemeをさわりだけ実装。 減算・乗算・if式が実行可能。&lt;/p&gt;
&lt;p&gt;今までGCある言語しか使ってこなかった身としては結構つらいところある。 
C/C++の素養があればもっとスムーズに始められと思われる。&lt;/p&gt;
&lt;p&gt;enumにclosure入れるのとかやっとの事で理解できた。&lt;/p&gt;
&lt;p&gt;次はRust製のゲームエンジン&lt;a href="http://www.piston.rs/"&gt;piston&lt;/a&gt;触ってみたい。&lt;/p&gt;
&lt;script src="https://gist.github.com/meganehouser/e8eee004304fbda7d4a8.js"&gt;&lt;/script&gt;</content><category term="rust"></category></entry><entry><title>F#でTHETA360を制御</title><link href="http://meganehouser.github.io/2014-12-06_theta360-fsharp.html" rel="alternate"></link><published>2014-12-06T00:00:00+09:00</published><updated>2014-12-06T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2014-12-06:/2014-12-06_theta360-fsharp.html</id><summary type="html">&lt;p&gt;F#でTHETA360のシャッターを切ります。&lt;/p&gt;</summary><content type="html">&lt;p&gt;RICOH THETA 360はAPIが公開されているので、F#で制御するコードを書いてみることにした。&lt;/p&gt;
&lt;p&gt;THETAのAPIはPTP-IPという規格に沿っている。
ただし、PTP-IPの規格書は法人しか入手できないため、THETAのSDKに入っているコード(Android, iOS向け)を参考にして書くなどする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cipa.jp/ptp-ip/index_j.html"&gt;PTP-IP -CIPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.theta360.com/ja/forums/viewtopic.php?f=5&amp;amp;t=9"&gt;法人ではないため、PTP-IPドキュメントが入手できません。 | RICOH THETA Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードを公開している先人もいらっしゃるのでそれを参考にさせていただいた。（というかほぼ移植）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/tako-two/20131201/1385911498"&gt;シャッターを切って画像のダウンロードも - Tako can fry!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wi-Fiで接続し、下記のF#スクリプトを実行すると、接続-&amp;gt;シャッター-&amp;gt;切断、の流れを実行する。&lt;br&gt;
なお、作っている途中に興味が他に映ってしまったため、シャッターを切るところまでしか実装していない…
&lt;script src="https://gist.github.com/meganehouser/b86e208c5e2b887c2789.js"&gt;&lt;/script&gt;&lt;/p&gt;</content><category term="fsharp"></category></entry><entry><title>カジュアルF#</title><link href="http://meganehouser.github.io/2014-12-02_casual-fsharp.html" rel="alternate"></link><published>2014-12-02T00:00:00+09:00</published><updated>2014-12-02T00:00:00+09:00</updated><author><name>meganehouser</name></author><id>tag:meganehouser.github.io,2014-12-02:/2014-12-02_casual-fsharp.html</id><summary type="html">&lt;p&gt;この記事では、F#をカジュアルに使い始める方法について説明したい。&lt;/p&gt;</summary><content type="html">&lt;p&gt;社内Advent Calendar用に書いた記事&lt;/p&gt;
&lt;h3&gt;目次&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#whoareyou"&gt;お前誰よ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#about"&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intro"&gt;F#とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;導入方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repl"&gt;REPL F#はじめの一歩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#script"&gt;F#スクリプト 次の一歩&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#download"&gt;例1: ファイルをダウンロードする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refdll"&gt;例2: 他の.NETライブラリの読み込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webserver"&gt;例3: 簡易的なWebサーバ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#folder"&gt;例4: 複雑なフォルダ構造を作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id='whoareyou'&gt;お前誰よ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;職種: SE&lt;/li&gt;
&lt;li&gt;お仕事: Word, Excel, たまにC#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プライベートではPythonとかClojureとか&lt;/p&gt;
&lt;h1 id='about'&gt;概要&lt;/h1&gt;

&lt;p&gt;F#は.NET Frameworkの第一級言語だが、いきなりC#のポジションを置き換えようとすると大変。
F#は、REPLやスクリプト実行をサポートし、C#での開発をサポートする用途にも使える。
この記事では、F#をカジュアルに使い始める方法について説明したい。&lt;/p&gt;
&lt;h1 id='intro'&gt;F#とは&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;OCamlの影響を色濃く受けた、.NET Framework向けの言語。&lt;/li&gt;
&lt;li&gt;手続型、オブジェクト指向、関数型に対応した強い静的型付けのマルチパラダイムプログラミング言語。&lt;/li&gt;
&lt;li&gt;Visual Studio 2010 から標準搭載されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id='install'&gt;導入方法&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;今回はVisual Studio 2013 Community Editionをインストールした。&lt;/li&gt;
&lt;li&gt;その他の導入方法は &lt;a href="http://fsharp.org/use/windows/"&gt;Use F# on Windows | The F# Software Foundation&lt;/a&gt;を参照。&lt;/li&gt;
&lt;li&gt;Visual StudioのF#サポート機能がリッチになるので&lt;a href="http://fsprojects.github.io/VisualFSharpPowerTools/"&gt;Visual F# Power Tools&lt;/a&gt;も入れておこう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id='repl'&gt;REPL F#はじめの一歩&lt;/h1&gt;

&lt;p&gt;今時の言語はREPLが必ずと言っていいほど付いてくる。
もちろんF#にも！&lt;/p&gt;
&lt;p&gt;C#には今のところ公式なREPLがないが、F#のREPLを使って.NET Frameworkのクラスの挙動を即座に確認することができる。&lt;/p&gt;
&lt;h2&gt;REPL の使い方&lt;/h2&gt;
&lt;p&gt;Visaul Studio 2013 をインストールするとF#が以下のフォルダにインストールされている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C:\Program Files (x86)\Microsoft SDKs\F#\3.1\Framework\v4.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;パスを通しておこう。
F# のREPLはこのフォルダ内のfsi.exeが本体。&lt;/p&gt;
&lt;p&gt;例えば、DateTime型のフォーマット書式ってこれで合ってったっけ？って思ったら、fsiをおもむろに起動して以下のように確認すればいい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; open System;;
&amp;gt; DateTime.Now.ToString(&amp;quot;HH:mm:ss&amp;quot;);;
val it: string = &amp;quot;14:10:12&amp;quot;
&amp;gt; #q;; // REPLの終了
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1行目のopenは名前空間のインポート。C#でいうusingに相当する。
入力した部分を実行するには、行末に";;"を入力してEnterする。&lt;/p&gt;
&lt;p&gt;正規表現を試してみるのにも便利だろう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; open System.Text.RegularExpressions;;
&amp;gt; let isMatch pattern input =
-   let rgx = new Regex(pattern)
-   rgx.IsMatch(input);; // 関数を定義

val isMatch : pattern:string -&amp;gt; input:string -&amp;gt; bool

&amp;gt; isMatch &amp;quot;^\d{3}\-\d{4}$&amp;quot; &amp;quot;111-4444&amp;quot;;; // 定義した関数を呼び出してみる
val it : bool = true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この例ではアドホックな関数を定義して使用している。
let は識別子を、値または関数と関連付ける（束縛する）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;// 値を束縛する場合&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;   &lt;span class="c1"&gt;// 関数を束縛する場合&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id='script'&gt;F#スクリプト 次の一歩&lt;/h1&gt;

&lt;p&gt;F#も通常はプロジェクトを作成してビルドしてexeなりdllを作るが、fsiを使えばスクリプトとして実行できる。&lt;/p&gt;
&lt;p&gt;拡張子.fsxでファイルを作成し、Visual Studioにドラッグアンドドロップすれば、インテリセンス付きでスクリプトの編集が開始できる。&lt;/p&gt;
&lt;p&gt;いくつかF#の例を見ながら、F#の特徴的な機能を確認してみよう。&lt;/p&gt;
&lt;h2 id='download'&gt;例1: ファイルのダウンロード&lt;/h2&gt;

&lt;p&gt;例えば、コマンドラインからファイルをダウンロードしたい場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// wget.fsx&lt;/span&gt;
&lt;span class="c1"&gt;// Usage&lt;/span&gt;
&lt;span class="c1"&gt;//  &amp;gt; fsi wget.fsx http://example.com/sample.zip&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;fsi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandLineArgs&lt;/span&gt;&lt;span class="o"&gt;.[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Last&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DownloadFile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例外処理もオプション指定もないが、実質5行で書くことができた。&lt;/p&gt;
&lt;p&gt;記号"|&amp;gt;"はパイプラインと呼ばれる組み込み演算子。左辺の値を右辺の関数の引数として渡すもの
(この例ではパイプラインの前で改行しているので左辺は1行上の値に当たる）。
関数をメソッドチェーンのようにつなげて書けるため、処理の流れが視覚的に分かりやすい。&lt;/p&gt;
&lt;p&gt;実装は以下のように自分でも書けるので、機能を追加したパイプラインも容易に書ける。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;(|&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1個目のパイプラインの右辺にある"fun url -&amp;gt; url..." の部分は匿名関数。
匿名関数の書式は以下となる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fun 引数 -&amp;gt; 処理
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id='refdll'&gt;例2: 他の.NETライブラリの読み込み&lt;/h2&gt;

&lt;p&gt;F#から自作のライブラリやサードパーティのライブラリをアドホックに呼び出してみたいときも、スクリプトなら気軽だ！&lt;/p&gt;
&lt;p&gt;例えばOpenCvSharpを使用して、Webカメラで自分の顔を撮りたくなったら以下のスクリプトの出番だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;OpenCvSharp.dll&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;OpenCvSharp&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;capture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateCameraCapture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;CaptureDevice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;
    &lt;span class="n"&gt;ignore&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="nn"&gt;Cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1フレーム目は捨てる&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;me.bmp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;
    &lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dispose&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;冒頭の#r で.NETアセンブリのパスを指定して読み込ませることで、スクリプト内から使用できる。&lt;/p&gt;
&lt;p&gt;スクリプト内に波括弧がないことに気付いたかもしれない。
F#では軽量構文と冗語構文が用意されており、デフォルトでは軽量構文となっている。
軽量構文ではスコープはインデントで表現される。&lt;/p&gt;
&lt;h2 id='webserver'&gt;例3: 簡易的なWebサーバ&lt;/h2&gt;

&lt;p&gt;python3だと以下のコマンドでポート8000でWebサーバが起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m http.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;F# のスクリプトで簡易的に実装してみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// httpserver.fsx&lt;/span&gt;
&lt;span class="c1"&gt;// usage&lt;/span&gt;
&lt;span class="c1"&gt;//  &amp;gt; fsi httpserver.fsx&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System.Net&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;currentDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentDirectory&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;lstnr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HttpListener&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prefixes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://localhost:8000/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;let!&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromBeginEnd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginGetContext&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndGetContext&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;filePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Combine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawUrl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimStart&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exists&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAllBytes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                      &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OutputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                      &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
                       &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunSynchronously&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここでのポイントは"async{ ... }"。
コンピュテーション式という機能を使用している。
コンピュテーション式はletやforといったビルトインのキーワードや制御フローを独自に再定義できる。
式内では再定義したルールに従って処理が実行される。&lt;/p&gt;
&lt;p&gt;asyncは組み込みのコンピュテーション式で、非同期処理を書くためのもの。
定型的な処理や複雑な処理をコンピュテーション式の定義に実装することによって、式内の処理はシンプルに書ける。&lt;/p&gt;
&lt;p&gt;"match.."はmatch式というC#でいうところのswitch文のようなもの。
スクリプトではmatch式を使って、ファイル存在有無で処理を振り分けている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;match 式 with
| 式の値パターン1 -&amp;gt; 戻り値の式1
| 式の値パターン2 -&amp;gt; 戻り値の式2
| ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id='folder'&gt;例4: 複雑なフォルダ構造を作成する&lt;/h2&gt;

&lt;p&gt;複雑なフォルダ・ファイル構造を作成したい場合。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Dir&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1st&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1-1.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1-2.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
            &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2nd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2-1.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
        &lt;span class="o"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;makeDir&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateDirectory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;makeFile&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;combine&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Combine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
                         &lt;span class="n"&gt;makeDir&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;
                         &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;makeFile&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;冒頭のtype宣言は判別共用体というもの。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Dir&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この例ではファイルシステム要素を判別共用体として定義している。&lt;/p&gt;
&lt;p&gt;以下の内容をデータ構造として素直に表現している。視覚的にも分かりやすい。
&lt;em&gt; ファイルシステム要素(Entry)は、ファイル(File)またはディレクトリ(Dir)である
&lt;/em&gt; ファイルは文字列型の値(ファイル名)を持つ
* ディレクトリは文字列型の値(ディレクトリ名)と、ファイルシステム要素を複数持つ&lt;/p&gt;
&lt;p&gt;後半の関数定義で使用している"rec"キーワードは再帰関数を定義する際に必要。&lt;/p&gt;
&lt;p&gt;再帰関数内のmatch式は、パターンマッチを使用して判別共用体から実際の値を取り出して、処理で使用している。&lt;/p&gt;
&lt;h1 id='conclusion'&gt;まとめ&lt;/h1&gt;

&lt;p&gt;F#はREPLやスクリプトとしてカジュアルに使用できる！&lt;/p&gt;
&lt;p&gt;個人的には、仕事で開発する場合はC#が多く、F#はREPLやスクリプトで以下のような補助的なタスクに使用している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REPLで.NET Frameworkのクラスの挙動を確認&lt;/li&gt;
&lt;li&gt;スクリプトで作成中のC#アプリケーションまたはライブラリをアドホックに呼び出す&lt;/li&gt;
&lt;li&gt;スクリプトでテストデータを生成する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: それってPowerShellでもよくない？
&lt;div style="font-size:40px"&gt;A: F#の方が楽しいから&lt;/div&gt;
F#はLinuxでもMacでも書けるよ。&lt;br&gt;
あとF#の強力な抽象化の機能と、シンプルに書ける言語表現力は魅力だよ。&lt;/p&gt;
&lt;h3&gt;言い訳&lt;/h3&gt;
&lt;p&gt;（駆け足で紹介したので説明不足や厳密にいうと不正確な部分もあると思います。
疑問、指摘などあればコメントお願いします。）&lt;/p&gt;</content><category term="fsharp"></category></entry></feed>