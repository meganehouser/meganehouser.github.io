<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ぶりとだいこん</title><link>http://meganehouser.github.io/</link><description></description><atom:link href="http://meganehouser.github.io/feeds/meganehouser.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 24 Jun 2015 00:00:00 +0900</lastBuildDate><item><title>紫陽花とファインダー</title><link>http://meganehouser.github.io/2015-06-24_hydrangea.html</link><description>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/18858969771" title="Untitled by megane houser, on Flickr"&gt;
&lt;img src="https://c2.staticflickr.com/6/5601/18858969771_5a903030ea_z.jpg" width="640" height="480" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/18670429259" title="Untitled by megane houser, on Flickr"&gt;
&lt;img src="https://c2.staticflickr.com/6/5574/18670429259_e94551f77d_z.jpg" width="640" height="480" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/18856059785" title="Untitled by megane houser, on Flickr"&gt;
&lt;img src="https://c2.staticflickr.com/6/5535/18856059785_f763fb02a1_z.jpg" width="640" height="480" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/18852065732" title="Untitled by megane houser, on Flickr"&gt;
&lt;img src="https://c2.staticflickr.com/6/5463/18852065732_d9203e3940_z.jpg" width="640" height="480" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/18857457185" title="Untitled by megane houser, on Flickr"&gt;
&lt;img src="https://c2.staticflickr.com/6/5482/18857457185_596e8fa110_z.jpg" width="640" height="480" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写真を撮るのは楽しい。でも、懐古趣味みたいで嫌なのだが、学生時代にアナログカメラを持ち歩いていた時の方が楽しめていた感じがする。&lt;/p&gt;
&lt;p&gt;銀塩からデジタルになり、色や質感が変わったこともあるのだが、個人的にはファインダーが大きな要素だったのではと思っている。&lt;/p&gt;
&lt;p&gt;ファインダーに目を押し付け、暗がりから世界を覗き込む感じが好きだった。
ファインダーを通した世界は一種の異化作用が働き、僕は少しでも新鮮な感動を定着させようと、四角の枠で切り取られた光景に集中することができた。&lt;/p&gt;
&lt;p&gt;ライブビューが全盛となり、ファインダーがなかったり、オプションになってしまったのは、残念なのだった。
外付けのファインダー買うかな。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2015-06-24:2015-06-24_hydrangea.html</guid><category>E-PL2</category></item><item><title>mdファイルを表示する簡易Webサーバ</title><link>http://meganehouser.github.io/2015-04-19_md-view.html</link><description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Pythonでは、コマンドラインからモジュールを実行することで簡易的なWebサーバを起動できる。&lt;/p&gt;
&lt;p&gt;Markdownファイルだった場合はhtmlに変換して、簡易mdビューアとして使用したい。&lt;/p&gt;
&lt;h2&gt;方法&lt;/h2&gt;
&lt;p&gt;Python3.4のhttp.server.py 内のSimpleHTTPRequestHandlerを継承し、send_headメソッドをオーバーライドした。&lt;/p&gt;
&lt;p&gt;変更箇所は以下。他の部分は元のsend_headをそのまま持ってきている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fstat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
    &lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;markdown.extensions.extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;bs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;拡張子がmdだった場合に&lt;a href="https://pypi.python.org/pypi/Markdown"&gt;Markdown&lt;/a&gt;を使用してhtmlに変換している。&lt;/p&gt;
&lt;p&gt;それだけだと芸がないので、-o (open) オプションをつけると、自動でブラウザで開くようにした。&lt;/p&gt;
&lt;p&gt;以下の関数を別スレッドで起動している。
headリクエストを投げ、200で返ってきたらサーバが起動したとみなしブラウザでページを開いている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HEAD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getresponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://{}:{}/{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ConnectionRefusedError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ブラウザを開くのには標準モジュールのwebbrowserを使用している。
Python3系統で導入された、空を飛べる標準モジュール"antigravity"でも使われているものだ。
知らない人は以下を実行してみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;antigravity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;cgi&lt;/h2&gt;
&lt;p&gt;python3.4のhttpのモジュールのserver.pyを読んでいて気付いたのだが、いつの間にかコマンドラインから簡易CGIサーバを起動する方法が復活していた。&lt;/p&gt;
&lt;p&gt;試しにcgi-binディレクトリを作り以下のファイルを置く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#! /usr/bin/env python3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Type: text/html&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;h2&amp;gt;Hello&amp;lt;/h2&amp;gt;&amp;lt;br&amp;gt;from Python3&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ファイルに実行のパーミッションを付加してから、以下のコマンドでCGIサーバを起動。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python http.server --cgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;http://localhost:8000/cgi-bin/hello.py で実行。&lt;/p&gt;
&lt;h2&gt;スクリプト全文&lt;/h2&gt;
&lt;p&gt;MarkDownを表示できる簡易サーバのスクリプト全文は以下。&lt;/p&gt;
&lt;script src="https://gist.github.com/meganehouser/271852d192e64c9e688e.js"&gt;&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sun, 19 Apr 2015 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2015-04-19:2015-04-19_md-view.html</guid><category>python</category></item><item><title>ゆるふわIT談話室 第13回</title><link>http://meganehouser.github.io/2015-04-18_yurufuwa-it-13.html</link><description>&lt;p&gt;知り合いを集めて非定期でもくもく作業したり、会話したり、LTしたりする会を開いている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開催経緯&lt;ul&gt;
&lt;li&gt;&lt;a href="http://meganehouser.hatenablog.com/entry/2013/06/30/154523"&gt;F#談話室に憧れて知り合いでIT勉強会開いた話&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;開催日&lt;ul&gt;
&lt;li&gt;4/12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参加者&lt;ul&gt;
&lt;li&gt;4名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;場所&lt;ul&gt;
&lt;li&gt;新橋のコワーキングスペース &lt;a href="http://basispoint.tokyo/"&gt;BasisPoint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;各々の作業者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://koding.com"&gt;koding.com&lt;/a&gt;上でBoxのRuby SDKを使って何か作る&lt;/li&gt;
&lt;li&gt;Android SDKのチュートリアルをやるつもりがブルースクリーンになってその対応に負われる&lt;/li&gt;
&lt;li&gt;flaskでレスポンシブサイトを作った後、飽きたのでUnityを試してみる&lt;/li&gt;
&lt;li&gt;(自分)flaskでmarkdownファイルを表示できるサイトを作る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私はflaskでmarkdownサイト作りをやってたが、その後SimpleHTTPRequestHandlerを継承したほうが簡単そうなので書き換えた。&lt;/p&gt;
&lt;h2&gt;LT&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;koding.comの紹介&lt;/li&gt;
&lt;li&gt;前クール、巷で話題だったSHIROBAKOを紹介する&lt;/li&gt;
&lt;li&gt;herokuに速攻でflaskのhello worldを作る&lt;/li&gt;
&lt;li&gt;(自分)flask, react.js, gulpなど使って作ったWebアプリの紹介&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私の作ったWebアプリは以下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/meganehouser/kantencolors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;画面はこんな感じ。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/17186497045" title="Untitled by megane houser, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5469/17186497045_5e3f09fbfc_n.jpg" width="320" height="282" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;カラーピッカー画面で色とパーセンテージを入力。&lt;/p&gt;
&lt;p&gt;カラピッカーは&lt;a href="https://github.com/stayradiated/react-colorpicker"&gt;stayradiated/react-colorpicker&lt;/a&gt;を使わせてもらった。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/17185969911" title="Untitled by megane houser, on Flickr"&gt;&lt;img src="https://farm8.staticflickr.com/7608/17185969911_19235f265a_n.jpg" width="320" height="282" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tweetボタンをクリックするとバックエンドでgif画像を生成してTwitter APIを呼び出す。以下のようなツイートができる。&lt;/p&gt;
&lt;blockquote width="400" class="twitter-tweet" lang="ja"&gt;&lt;p&gt;例のどーなつの５人 &lt;a href="https://twitter.com/hashtag/kanten_colors?src=hash"&gt;#kanten_colors&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/yurufuwa_it?src=hash"&gt;#yurufuwa_it&lt;/a&gt; &lt;a href="http://t.co/d9IySMhHRc"&gt;pic.twitter.com/d9IySMhHRc&lt;/a&gt;&lt;/p&gt;&amp;mdash; めがねはうさー (@meganehouser) &lt;a href="https://twitter.com/meganehouser/status/587152035515990016"&gt;2015, 4月 12&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote width="400" class="twitter-tweet" lang="ja"&gt;&lt;p&gt;初物の人造人間 &lt;a href="https://twitter.com/hashtag/kanten_colors?src=hash"&gt;#kanten_colors&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/yurufuwa_it?src=hash"&gt;#yurufuwa_it&lt;/a&gt; &lt;a href="http://t.co/fCoxMFVzfq"&gt;pic.twitter.com/fCoxMFVzfq&lt;/a&gt;&lt;/p&gt;&amp;mdash; めがねはうさー (@meganehouser) &lt;a href="https://twitter.com/meganehouser/status/587153681788710913"&gt;2015, 4月 12&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ある程度最近のフロントエンド技術を使ってみたかったのでReact.js, gulp, sassなど使ってみた。&lt;/p&gt;
&lt;p&gt;噂通り、React.jsはWebCompnentを組み合わせて構成するというのがかなり新鮮だった。&lt;br /&gt;
どこをどう変更するのかではなく、最終的にどういうマークアップになるか、で書けるのがよかった。&lt;/p&gt;
&lt;p&gt;また、単純なGIF画像を生成するのにPillowとか入れるのもトゥーマッチな感じなので、Pythonで自前で生成している。&lt;a href="https://github.com/meganehouser/kantencolors/blob/master/project/gif.py"&gt;gif.py&lt;/a&gt;
バイナリをゴリゴリ書くはほぼはじめてだったため、バグをつぶすのに苦労した。&lt;/p&gt;
&lt;p&gt;herokuにpushするつもりだったが、herokuではセッション周りを書き換えないといけないらしい。
まだヴァリデーションを全然書いていないので、とりあえず断念している。
そのうちバリデーション・デザインを強化後にvpsでも借りて公開したい。&lt;/p&gt;
&lt;h2&gt;開催中の様子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Toggeterにまとめてみた。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://togetter.com/li/808537"&gt;ゆるふわIT(13)@新橋&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sat, 18 Apr 2015 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2015-04-18:2015-04-18_yurufuwa-it-13.html</guid><category>yurufuwa_it</category></item><item><title>Hello World の代わりにLED風数字</title><link>http://meganehouser.github.io/2015-04-04_led-numbers.html</link><description>&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;こんな記事を見かけたので書いてみることにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blagrants.blogspot.jp/2015/04/led-is-my-new-hello-world-clojure-time.html"&gt;Blag's bag of rants: LED is my new Hello World - Clojure Time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;標準入力で数字を入力すると、LED風に表示するものだ。&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;script src="https://gist.github.com/meganehouser/179da869944c5f2a47eb.js"&gt;&lt;/script&gt;

&lt;h3&gt;Rust&lt;/h3&gt;
&lt;p&gt;リリースされたばかりのBeta 1.0.0を入れたらunstableな機能が使えなくなったのでnightlyでやった。&lt;/p&gt;
&lt;script src="https://gist.github.com/meganehouser/14d255f336189b6f4603.js"&gt;&lt;/script&gt;

&lt;h3&gt;FSharp&lt;/h3&gt;
&lt;script src="https://gist.github.com/meganehouser/457c0b149b8e866205e6.js"&gt;&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sat, 04 Apr 2015 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2015-04-04:2015-04-04_led-numbers.html</guid><category>fsharp</category><category>rust</category><category>python</category></item><item><title>Scheme in Rust</title><link>http://meganehouser.github.io/2015-01-10.html</link><description>&lt;p&gt;Rust 1.0 alpha がリリースされたのでRustを書いてみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/b/ashleyf/archive/2010/09/24/fscheme-0-0-0.aspx"&gt;FScheme - Scheme in F# - Code Monkey Have Fun - Site Home - MSDN Blogs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このサイトを参考にSchemeをさわりだけ実装。 減算・乗算・if式が実行可能。&lt;/p&gt;
&lt;p&gt;今までGCある言語しか使ってこなかった身としては結構つらいところある。 
C/C++の素養があればもっとスムーズに始められと思われる。&lt;/p&gt;
&lt;p&gt;enumにclosure入れるのとかやっとの事で理解できた。&lt;/p&gt;
&lt;p&gt;次はRust製のゲームエンジン&lt;a href="http://www.piston.rs/"&gt;piston&lt;/a&gt;触ってみたい。&lt;/p&gt;
&lt;script src="https://gist.github.com/meganehouser/e8eee004304fbda7d4a8.js"&gt;&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sat, 10 Jan 2015 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2015-01-10:2015-01-10.html</guid><category>rust</category></item><item><title>ドロネー三角形分割の羊</title><link>http://meganehouser.github.io/2015-01-01_sheep.html</link><description>&lt;p&gt;あけましておめでとうございます。ドロネー三角形分割で羊を書いてみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/16151453002" title="delauny by megane houser, on Flickr"&gt;&lt;img src="https://farm8.staticflickr.com/7518/16151453002_e77a1c43e3_o.jpg" width="1000" height="800" alt="delauny"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードは以下。
&lt;script src="https://gist.github.com/meganehouser/2322ebd7b3f16857b3fe.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;ドロネー三角形分割はdelauney.cljに実装してある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;delaunay-diagram&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;points&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;点の集合をドロネー三角分割する&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;;--- 略 ---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記の関数にPointレコードのベクターを引数に呼び出すと、ドロネー三角形分割済みのTriangleレコードのベクターが返ってくる。&lt;/p&gt;
&lt;p&gt;レコードの定義は以下のようになっている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defrecord &lt;/span&gt;&lt;span class="nv"&gt;Point&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defrecord &lt;/span&gt;&lt;span class="nv"&gt;Triangle&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;p1&lt;/span&gt; &lt;span class="nv"&gt;p2&lt;/span&gt; &lt;span class="nv"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、アルゴリズムや実装方法について以下を参考にさせていただいた。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/edo_m18/items/7b3c70ed97bac52b2203"&gt;グラフィック - ドロネー三角形分割を自前で実装してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.riken.jp/brict/Ijiri/study/DelaunayTriangulation.htm"&gt;制約付きドロネー三角形分割&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tercel-sakuragaoka.blogspot.jp/2011/06/processingdelaunay_3958.html"&gt;Tercel::Diary: ProcessingでDelaunay分割(解説篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://katsura-kotonoha.sakura.ne.jp/prog/c/tip00030.shtml"&gt;点が三角形内に含まれるか調べる－C/C++－水無瀬の部屋&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Thu, 01 Jan 2015 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2015-01-01:2015-01-01_sheep.html</guid><category>computational geometry</category><category>quil</category><category>processing</category></item><item><title>Quil -&gt; Movie -&gt; Youtube</title><link>http://meganehouser.github.io/2014-12-30_quil-movie-youtube.html</link><description>&lt;p&gt;写真とQuil(Processing)を組み合わせたものに興味があり、試しに動画化、YouTubeにアップロードしてみた。&lt;/p&gt;
&lt;h2&gt;1. Quilのスケッチからフレームごとの画像を作成する&lt;/h2&gt;
&lt;p&gt;今回、動画を作ったコード。
&lt;script src="https://gist.github.com/meganehouser/0507cbb86075878a5ed4.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;ポイントはdraw関数内の以下の部分。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;; -- 略 -- &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/save-frame&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;frames/####.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;save-frameで現在のフレームを保存する。&lt;/p&gt;
&lt;h2&gt;2. フレームごとの画像を動画に変換する&lt;/h2&gt;
&lt;p&gt;Processingに付属しているツール、MovieMakerを使用した。&lt;/p&gt;
&lt;p&gt;スケッチはQuilで書いてるのに片手落ちだが、手軽だからよしとする。&lt;/p&gt;
&lt;p&gt;MovieMakerで画像を保存したフォルダを指定すればよい。&lt;/p&gt;
&lt;h2&gt;3. YouTube にアップロードする&lt;/h2&gt;
&lt;p&gt;&lt;iframe width="640" height="390" src="//www.youtube.com/embed/o4CmVlCiasU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;最初はVineにアップロードしようとしたが、VineのAPIは非公開、かつVineにPCから動画をアップロードできるVineClientは不審な通信をしてるらしいので無難にYouTubeにしといた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a href="view-source:http://minidoga.jp/blog/20140327.html"&gt;PCからVine投稿できるChrome機能拡張に不審な通信【Vineユーザー検索のミニ動画JP】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Tue, 30 Dec 2014 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2014-12-30:2014-12-30_quil-movie-youtube.html</guid><category>quil</category><category>processing</category><category>YouTube</category></item><item><title>F#でTHETA360を制御</title><link>http://meganehouser.github.io/2014-12-06_theta360-fsharp.html</link><description>&lt;p&gt;RICOH THETA 360はAPIが公開されているので、F#で制御するコードを書いてみることにした。&lt;/p&gt;
&lt;p&gt;THETAのAPIはPTP-IPという規格に沿っている。
ただし、PTP-IPの規格書は法人しか入手できないため、THETAのSDKに入っているコード(Android, iOS向け)を参考にして書くなどする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cipa.jp/ptp-ip/index_j.html"&gt;PTP-IP -CIPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.theta360.com/ja/forums/viewtopic.php?f=5&amp;amp;t=9"&gt;法人ではないため、PTP-IPドキュメントが入手できません。 | RICOH THETA Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードを公開している先人もいらっしゃるのでそれを参考にさせていただいた。（というかほぼ移植）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/tako-two/20131201/1385911498"&gt;シャッターを切って画像のダウンロードも - Tako can fry!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wi-Fiで接続し、下記のF#スクリプトを実行すると、接続-&amp;gt;シャッター-&amp;gt;切断、の流れを実行する。&lt;br&gt;
なお、作っている途中に興味が他に映ってしまったため、シャッターを切るところまでしか実装していない…
&lt;script src="https://gist.github.com/meganehouser/b86e208c5e2b887c2789.js"&gt;&lt;/script&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sat, 06 Dec 2014 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2014-12-06:2014-12-06_theta360-fsharp.html</guid><category>fsharp</category></item><item><title>銅版画のようなイメージを作りたい その1</title><link>http://meganehouser.github.io/2014-12-03_mezzotint-like-image01.html</link><description>&lt;p&gt;浜口陽三の多色刷りのメゾチントが好きだ。なんとかしてProcessingでメゾチント風味を表現できないか。&lt;/p&gt;
&lt;h3&gt;メゾチントの手法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;版の面全体に縦横斜めに無数の線を刻む。(目立て)
   (目の細かさで濃淡の表現が可能)&lt;/li&gt;
&lt;li&gt;目を金属のへら(バーニッシャー、スクレーパー)で削って絵を描く。
   (目を残した部分にインクが残り、色が載る)&lt;/li&gt;
&lt;li&gt;多色刷りの場合は1. と 2.を色数分作る&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;試してみたこと&lt;/h3&gt;
&lt;p&gt;目立てを縦横斜めのstroke-weightが0.1のlineで再現。lineはランダムで消したりずらしたりしている。&lt;/p&gt;
&lt;p&gt;メゾチントの質感は出ていないがおもしろい感じになった。&lt;/p&gt;
&lt;p&gt;次は濃淡をどのように表現するか。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/125573348@N07/15751621509" title="hanga-like by megane houser, on Flickr"&gt;&lt;img src="https://farm8.staticflickr.com/7467/15751621509_fc19d782c9.jpg" width="357" height="500" alt="hanga-like"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;hanga.core&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;quil.core&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;canvas-len&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;c-red&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/color&lt;/span&gt; &lt;span class="mi"&gt;172&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;c-green&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/color&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;, &lt;span class="mi"&gt;100&lt;/span&gt;, &lt;span class="mi"&gt;84&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;c-blue&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/color&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;, &lt;span class="mi"&gt;48&lt;/span&gt;, &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;colors&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;c-green&lt;/span&gt; &lt;span class="nv"&gt;c-blue&lt;/span&gt; &lt;span class="nv"&gt;c-red&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;back&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/color&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;, &lt;span class="mi"&gt;13&lt;/span&gt;, &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;middle&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;light&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;  &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;rand-bool&lt;/span&gt; 
  &lt;span class="p"&gt;([]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand-int &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;gauss-rand&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/random-gaussian&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;rand-line&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;x1&lt;/span&gt; &lt;span class="nv"&gt;y1&lt;/span&gt; &lt;span class="nv"&gt;x2&lt;/span&gt; &lt;span class="nv"&gt;y2&lt;/span&gt; &lt;span class="nv"&gt;rough&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-bool&lt;/span&gt; &lt;span class="nv"&gt;rough&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;gauss-rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;x2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;gauss-rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;gauss-rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;y2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;gauss-rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/line&lt;/span&gt; &lt;span class="nv"&gt;x1&lt;/span&gt; &lt;span class="nv"&gt;y1&lt;/span&gt; &lt;span class="nv"&gt;x2&lt;/span&gt; &lt;span class="nv"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;sort-side&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="nv"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="nv"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:w&lt;/span&gt; &lt;span class="ss"&gt;:h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:h&lt;/span&gt; &lt;span class="ss"&gt;:w&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;square&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r1&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/stroke-weight&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/with-translation&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/with-rotation&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nv"&gt;rotate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;q/PI&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doseq &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doseq &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:w&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="ss"&gt;:h&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;long-side&lt;/span&gt; &lt;span class="nv"&gt;short-side&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sort-side&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doseq &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;short-side&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doseq &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;long-side&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;short-side&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;long-side&lt;/span&gt; &lt;span class="ss"&gt;:w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-line&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;odd&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rem &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;bg&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/stroke&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;back&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doseq &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;square&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;odd&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;middle&lt;/span&gt; &lt;span class="nv"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/smooth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/background&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/stroke&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doseq &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/stroke&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;nth &lt;/span&gt;&lt;span class="nv"&gt;colors&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand-int &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;h&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand-int &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand-int &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand-int &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;h&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;square&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="nv"&gt;h&lt;/span&gt; &lt;span class="nv"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-bool&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;mouse-pressed&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/save&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;start-sketch&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;q/sketch&lt;/span&gt;
    &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hanga&amp;quot;&lt;/span&gt;
    &lt;span class="ss"&gt;:size&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="mi"&gt;700&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="ss"&gt;:setup&lt;/span&gt; &lt;span class="nv"&gt;setup&lt;/span&gt;
    &lt;span class="ss"&gt;:mouse-pressed&lt;/span&gt; &lt;span class="nv"&gt;mouse-pressed&lt;/span&gt;
    &lt;span class="ss"&gt;:features&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:exit-on-close&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;-main&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;start-sketch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Wed, 03 Dec 2014 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2014-12-03:2014-12-03_mezzotint-like-image01.html</guid><category>mezzotint</category><category>quil</category><category>processing</category></item><item><title>カジュアルF#</title><link>http://meganehouser.github.io/2014-12-02_casual-fsharp.html</link><description>&lt;p&gt;社内Advent Calendar用に書いた記事&lt;/p&gt;
&lt;h3&gt;目次&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#whoareyou"&gt;お前誰よ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#about"&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intro"&gt;F#とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;導入方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repl"&gt;REPL F#はじめの一歩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#script"&gt;F#スクリプト 次の一歩&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#download"&gt;例1: ファイルをダウンロードする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refdll"&gt;例2: 他の.NETライブラリの読み込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webserver"&gt;例3: 簡易的なWebサーバ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#folder"&gt;例4: 複雑なフォルダ構造を作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1 id='whoareyou'&gt;お前誰よ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;職種: SE&lt;/li&gt;
&lt;li&gt;お仕事: Word, Excel, たまにC#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プライベートではPythonとかClojureとか&lt;/p&gt;
&lt;h1 id='about'&gt;概要&lt;/h1&gt;

&lt;p&gt;F#は.NET Frameworkの第一級言語だが、いきなりC#のポジションを置き換えようとすると大変。
F#は、REPLやスクリプト実行をサポートし、C#での開発をサポートする用途にも使える。
この記事では、F#をカジュアルに使い始める方法について説明したい。&lt;/p&gt;
&lt;h1 id='intro'&gt;F#とは&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;OCamlの影響を色濃く受けた、.NET Framework向けの言語。&lt;/li&gt;
&lt;li&gt;手続型、オブジェクト指向、関数型に対応した強い静的型付けのマルチパラダイムプログラミング言語。&lt;/li&gt;
&lt;li&gt;Visual Studio 2010 から標準搭載されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id='install'&gt;導入方法&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;今回はVisual Studio 2013 Community Editionをインストールした。&lt;/li&gt;
&lt;li&gt;その他の導入方法は &lt;a href="http://fsharp.org/use/windows/"&gt;Use F# on Windows | The F# Software Foundation&lt;/a&gt;を参照。&lt;/li&gt;
&lt;li&gt;Visual StudioのF#サポート機能がリッチになるので&lt;a href="http://fsprojects.github.io/VisualFSharpPowerTools/"&gt;Visual F# Power Tools&lt;/a&gt;も入れておこう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id='repl'&gt;REPL F#はじめの一歩&lt;/h1&gt;

&lt;p&gt;今時の言語はREPLが必ずと言っていいほど付いてくる。
もちろんF#にも！&lt;/p&gt;
&lt;p&gt;C#には今のところ公式なREPLがないが、F#のREPLを使って.NET Frameworkのクラスの挙動を即座に確認することができる。&lt;/p&gt;
&lt;h2&gt;REPL の使い方&lt;/h2&gt;
&lt;p&gt;Visaul Studio 2013 をインストールするとF#が以下のフォルダにインストールされている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C:\Program Files (x86)\Microsoft SDKs\F#\3.1\Framework\v4.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;パスを通しておこう。
F# のREPLはこのフォルダ内のfsi.exeが本体。&lt;/p&gt;
&lt;p&gt;例えば、DateTime型のフォーマット書式ってこれで合ってったっけ？って思ったら、fsiをおもむろに起動して以下のように確認すればいい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; open System;;
&amp;gt; DateTime.Now.ToString(&amp;quot;HH:mm:ss&amp;quot;);;
val it: string = &amp;quot;14:10:12&amp;quot;
&amp;gt; #q;; // REPLの終了
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1行目のopenは名前空間のインポート。C#でいうusingに相当する。
入力した部分を実行するには、行末に";;"を入力してEnterする。&lt;/p&gt;
&lt;p&gt;正規表現を試してみるのにも便利だろう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; open System.Text.RegularExpressions;;
&amp;gt; let isMatch pattern input =
-   let rgx = new Regex(pattern)
-   rgx.IsMatch(input);; // 関数を定義

val isMatch : pattern:string -&amp;gt; input:string -&amp;gt; bool

&amp;gt; isMatch &amp;quot;^\d{3}\-\d{4}$&amp;quot; &amp;quot;111-4444&amp;quot;;; // 定義した関数を呼び出してみる
val it : bool = true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この例ではアドホックな関数を定義して使用している。
let は識別子を、値または関数と関連付ける（束縛する）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;// 値を束縛する場合&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;   &lt;span class="c1"&gt;// 関数を束縛する場合&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id='script'&gt;F#スクリプト 次の一歩&lt;/h1&gt;

&lt;p&gt;F#も通常はプロジェクトを作成してビルドしてexeなりdllを作るが、fsiを使えばスクリプトとして実行できる。&lt;/p&gt;
&lt;p&gt;拡張子.fsxでファイルを作成し、Visual Studioにドラッグアンドドロップすれば、インテリセンス付きでスクリプトの編集が開始できる。&lt;/p&gt;
&lt;p&gt;いくつかF#の例を見ながら、F#の特徴的な機能を確認してみよう。&lt;/p&gt;
&lt;h2 id='download'&gt;例1: ファイルのダウンロード&lt;/h2&gt;

&lt;p&gt;例えば、コマンドラインからファイルをダウンロードしたい場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// wget.fsx&lt;/span&gt;
&lt;span class="c1"&gt;// Usage&lt;/span&gt;
&lt;span class="c1"&gt;//  &amp;gt; fsi wget.fsx http://example.com/sample.zip&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Linq&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WebClient&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;fsi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CommandLineArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;[1]
|&amp;gt; &lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;Last&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DownloadFile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例外処理もオプション指定もないが、実質5行で書くことができた。&lt;/p&gt;
&lt;p&gt;記号"|&amp;gt;"はパイプラインと呼ばれる組み込み演算子。左辺の値を右辺の関数の引数として渡すもの
(この例ではパイプラインの前で改行しているので左辺は1行上の値に当たる）。
関数をメソッドチェーンのようにつなげて書けるため、処理の流れが視覚的に分かりやすい。&lt;/p&gt;
&lt;p&gt;実装は以下のように自分でも書けるので、機能を追加したパイプラインも容易に書ける。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;(|&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1個目のパイプラインの右辺にある"fun url -&amp;gt; url..." の部分は匿名関数。
匿名関数の書式は以下となる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fun 引数 -&amp;gt; 処理
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id='refdll'&gt;例2: 他の.NETライブラリの読み込み&lt;/h2&gt;

&lt;p&gt;F#から自作のライブラリやサードパーティのライブラリをアドホックに呼び出してみたいときも、スクリプトなら気軽だ！&lt;/p&gt;
&lt;p&gt;例えばOpenCvSharpを使用して、Webカメラで自分の顔を撮りたくなったら以下のスクリプトの出番だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OpenCvSharp.dll&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;OpenCvSharp&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;capture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreateCameraCapture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;CaptureDevice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;
    &lt;span class="n"&gt;ignore&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="nn"&gt;Cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;QueryFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1フレーム目は捨てる&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;QueryFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SaveImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;me.bmp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;
    &lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Dispose&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;冒頭の#r で.NETアセンブリのパスを指定して読み込ませることで、スクリプト内から使用できる。&lt;/p&gt;
&lt;p&gt;スクリプト内に波括弧がないことに気付いたかもしれない。
F#では軽量構文と冗語構文が用意されており、デフォルトでは軽量構文となっている。
軽量構文ではスコープはインデントで表現される。&lt;/p&gt;
&lt;h2 id='webserver'&gt;例3: 簡易的なWebサーバ&lt;/h2&gt;

&lt;p&gt;python3だと以下のコマンドでポート8000でWebサーバが起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m http.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;F# のスクリプトで簡易的に実装してみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// httpserver.fsx&lt;/span&gt;
&lt;span class="c1"&gt;// usage&lt;/span&gt;
&lt;span class="c1"&gt;//  &amp;gt; fsi httpserver.fsx&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Net&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IO&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;currentDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CurrentDirectory&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lstnr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HttpListener&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Prefixes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Add&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8000/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Start&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FromBeginEnd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;BeginGetContext&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EndGetContext&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Response&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Combine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;RawUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TrimStart&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;Replace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Exists&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadAllBytes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                      &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;OutputStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                      &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Close&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StatusCode&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
                       &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Close&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Start&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここでのポイントは"async{ ... }"。
コンピュテーション式という機能を使用している。
コンピュテーション式はletやforといったビルトインのキーワードや制御フローを独自に再定義できる。
式内では再定義したルールに従って処理が実行される。&lt;/p&gt;
&lt;p&gt;asyncは組み込みのコンピュテーション式で、非同期処理を書くためのもの。
定型的な処理や複雑な処理をコンピュテーション式の定義に実装することによって、式内の処理はシンプルに書ける。&lt;/p&gt;
&lt;p&gt;"match.."はmatch式というC#でいうところのswitch文のようなもの。
スクリプトではmatch式を使って、ファイル存在有無で処理を振り分けている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;match 式 with
| 式の値パターン1 -&amp;gt; 戻り値の式1
| 式の値パターン2 -&amp;gt; 戻り値の式2
| ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id='folder'&gt;例4: 複雑なフォルダ構造を作成する&lt;/h2&gt;

&lt;p&gt;複雑なフォルダ・ファイル構造を作成したい場合。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IO&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nc"&gt;Entry&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nc"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="nc"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1st&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1-1.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1-2.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
            &lt;span class="nc"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2nd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2-1.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
        &lt;span class="o"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;makeDir&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreateDirectory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;makeFile&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Close&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Combine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
                         &lt;span class="n"&gt;makeDir&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;
                         &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;makeFile&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;冒頭のtype宣言は判別共用体というもの。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nc"&gt;Entry&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この例ではファイルシステム要素を判別共用体として定義している。&lt;/p&gt;
&lt;p&gt;以下の内容をデータ構造として素直に表現している。視覚的にも分かりやすい。
&lt;em&gt; ファイルシステム要素(Entry)は、ファイル(File)またはディレクトリ(Dir)である
&lt;/em&gt; ファイルは文字列型の値(ファイル名)を持つ
* ディレクトリは文字列型の値(ディレクトリ名)と、ファイルシステム要素を複数持つ&lt;/p&gt;
&lt;p&gt;後半の関数定義で使用している"rec"キーワードは再帰関数を定義する際に必要。&lt;/p&gt;
&lt;p&gt;再帰関数内のmatch式は、パターンマッチを使用して判別共用体から実際の値を取り出して、処理で使用している。&lt;/p&gt;
&lt;h1 id='conclusion'&gt;まとめ&lt;/h1&gt;

&lt;p&gt;F#はREPLやスクリプトとしてカジュアルに使用できる！&lt;/p&gt;
&lt;p&gt;個人的には、仕事で開発する場合はC#が多く、F#はREPLやスクリプトで以下のような補助的なタスクに使用している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REPLで.NET Frameworkのクラスの挙動を確認&lt;/li&gt;
&lt;li&gt;スクリプトで作成中のC#アプリケーションまたはライブラリをアドホックに呼び出す&lt;/li&gt;
&lt;li&gt;スクリプトでテストデータを生成する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: それってPowerShellでもよくない？
&lt;div style="font-size:40px"&gt;A: F#の方が楽しいから&lt;/div&gt;
F#はLinuxでもMacでも書けるよ。&lt;br&gt;
あとF#の強力な抽象化の機能と、シンプルに書ける言語表現力は魅力だよ。&lt;/p&gt;
&lt;h3&gt;言い訳&lt;/h3&gt;
&lt;p&gt;（駆け足で紹介したので説明不足や厳密にいうと不正確な部分もあると思います。
疑問、指摘などあればコメントお願いします。）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Tue, 02 Dec 2014 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2014-12-02:2014-12-02_casual-fsharp.html</guid><category>fsharp</category></item><item><title>THETA360試し取り</title><link>http://meganehouser.github.io/2014-11-30_first-theta360.html</link><description>&lt;p&gt;THETA360を購入したので試しに取ってみた。&lt;/p&gt;
&lt;p&gt;1プッシュでぐるりと周囲の全てが記録される感覚、通常のカメラとの被写体と撮影者の位置の違い（自らが撮影場所のど真ん中に踏み込む）のが新鮮だ。&lt;/p&gt;
&lt;blockquote data-width="500" data-height="375" class="ricoh-theta-spherical-image" &gt;Post from RICOH THETA. - &lt;a href="https://theta360.com/s/aLn" target="_blank"&gt;Spherical Image - RICOH THETA&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://theta360.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sun, 30 Nov 2014 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2014-11-30:2014-11-30_first-theta360.html</guid><category>THETA360</category></item><item><title>macvim-kaoriyaをソースからビルド</title><link>http://meganehouser.github.io/2014-11-29_build-macvim-kaoriya.html</link><description>&lt;p&gt;普段はMacVim-Kaoriyaを配布されているdmgからインストールしていて使用している。&lt;/p&gt;
&lt;p&gt;配布されているdmgでは、Python2/Python3とも有効かされているが、jedi-vimがどうしてもPython2.7で実行されてしまうので、Python3のコード編集時に補完がうまくいかない。&lt;/p&gt;
&lt;p&gt;Python2を無効化、Python3を有効化してビルドしてみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;環境&lt;ul&gt;
&lt;li&gt;Mac OS X 10.9.5&lt;/li&gt;
&lt;li&gt;macvim-kaoriya 7.4 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1. cmigemoをインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ brew install cmigemo
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. libiconvのビルド・インストール&lt;/h2&gt;
&lt;p&gt;libiconvを'-arch i386 -arch x86_64'でビルド・インストールする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz
$ tar xzf libiconv-1.14.tar.gz
$ cd libiconv-1.14
$ CFLAGS=&amp;#39;-arch i386 -arch x86_64&amp;#39; CCFLAGS=&amp;#39;-arch i386 -arch x86_64&amp;#39; CXXFLAGS=&amp;#39;-arch i386 -arch x86_64&amp;#39; ./configure
$ make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. macvim-kaoriyaのソースを取得&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ git clone git://github.com/splhack/macvim.git
$ cd macvim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. poファイルをビルドする&lt;/h2&gt;
&lt;p&gt;macvim/src/po ディレクトリでmakeを実行&lt;/p&gt;
&lt;h2&gt;5. ビルド用のShell Scriptを作成・実行する&lt;/h2&gt;
&lt;p&gt;解凍したmacvim-kaoriyaの直下に以下のシェルスクリプトを作る。
mac_install.sh&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;#! /bin/sh

cd src
CC=clang

LIBS=&amp;quot;-lmigemo&amp;quot; LDFLAGS=-L/usr/local/lib ./configure --enable-python3interp --enable-luainterp --with-lua-prefix=/opt/local LUA_PREFIX=/opt/local -enable-multibyte --with-features=huge --enable-cscope --enable-migemo

make
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;5. 出来上がったMacVimをインストール&lt;/h2&gt;
&lt;p&gt;インストールして適当にMacVim3とかalias付けて使ってます。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/macvim-kaoriya/wiki/Building?tm=4"&gt;MacVim-KaoriYaのビルド方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/b4winckler/macvim/wiki/Building#how-to-build-macvim"&gt;Building · b4winckler/macvim Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wwwjfy.net/2011/03/02/compile-vim-7-3-in-mac-os-x-10-6-6/"&gt;Compile vim 7.3 in Mac OS X 10.6.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://muryoimpl.com/blog/2013/06/27/compile-macvim/"&gt;Macvimを自分でコンパイルした(mac) - なんか書いていこうぜー.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sat, 29 Nov 2014 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2014-11-29:2014-11-29_build-macvim-kaoriya.html</guid><category>vim macvim</category></item><item><title>Pelicanでblogを始めました</title><link>http://meganehouser.github.io/2014-11-15_first-article.html</link><description>&lt;p&gt;夕焼けの歌を聴いた
&lt;a href="https://www.flickr.com/photos/125573348@N07/14737390253"&gt;&lt;img alt="夕焼け" src="https://farm6.staticflickr.com/5571/14737390253_d40f03cd12_z.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">meganehouser</dc:creator><pubDate>Sat, 15 Nov 2014 00:00:00 +0900</pubDate><guid>tag:meganehouser.github.io,2014-11-15:2014-11-15_first-article.html</guid><category>E-PL2</category></item></channel></rss>